using BeatSaberMarkupLanguage.Attributes;
using BeatSaberMarkupLanguage.Notify;
using HMUI;
using System;
using System.Collections.Generic;
using System.Runtime.CompilerServices;
using System.Linq;
using TMPro;
using UnityEngine;
using UnityEngine.UI;

namespace BeatSaverDownloader.UI.ViewControllers
{
    public class SongDetailViewController : BeatSaberMarkupLanguage.ViewControllers.BSMLResourceViewController, INotifiableHost
    {
        public override string ResourceName => "BeatSaverDownloader.UI.BSML.songDetail.bsml";

        private GameObject _levelDetails;
        private bool _detailViewSetup = false;
        private BeatSaverSharp.Beatmap _currentSong;

        private BeatmapDifficultySegmentedControlController _difficultiesSegmentedControllerClone;
        private BeatmapCharacteristicSegmentedControlController _characteristicSegmentedControllerClone;
        private TextSegmentedControl _diffSegmentedControl;
        private IconSegmentedControl _characteristicSegmentedControl;

        private BeatSaverSharp.BeatmapCharacteristic _selectedCharacteristic;
        private BeatSaverSharp.BeatmapCharacteristicDifficulty[] _currentDifficulties;

        private CurvedTextMeshPro _songNameText;
        private ImageView _coverImage;

        private TextMeshProUGUI _timeText;
        private TextMeshProUGUI _bpmText;
        private CurvedTextMeshPro _songSubText;
        private CurvedTextMeshPro _npsText;
        private CurvedTextMeshPro _notesText;
        private CurvedTextMeshPro _obstaclesText;
        private CurvedTextMeshPro _bombsText;

        

        public Action<BeatSaverSharp.Beatmap, Sprite> didPressDownload;
        public Action<BeatSaverSharp.Beatmap> didPressPreview;
        public Action<BeatSaverSharp.User> didPressUploader;
        public Action<string> setDescription;

        private bool _showAutoGeneratedText = false;
        [UIValue("show-auto-generated-text")]
        public bool ShowAutoGeneratedText
        {
            get => _showAutoGeneratedText;
            set
            {
                _showAutoGeneratedText = value;
                NotifyPropertyChanged();
            }
        }

        private bool _downloadInteractable = false;
        [UIValue("downloadInteractable")]
        public bool DownloadInteractable
        {
            get => _downloadInteractable;
            set
            {
                _downloadInteractable = value;
                NotifyPropertyChanged();
            }
        }
        private bool _uploaderInteractable = true;
        [UIValue("uploaderInteractable")]
        public bool UploaderInteractable
        {
            get => _uploaderInteractable;
            set
            {
                _uploaderInteractable = value;
                NotifyPropertyChanged();
            }
        }
        private bool _previewInteractable = true;
        [UIValue("previewInteractable")]
        public bool PreviewInteractable
        {
            get => _previewInteractable;
            set
            {
                _previewInteractable = value;
                NotifyPropertyChanged();
            }
        }
        [UIAction("#post-parse")]
        internal void Setup()
        {
            (transform as RectTransform).sizeDelta = new Vector2(70, 0);
            (transform as RectTransform).anchorMin = new Vector2(0.5f, 0);
            (transform as RectTransform).anchorMax = new Vector2(0.5f, 1);

            SetupDetailView();
        }

        [UIAction("downloadPressed")]
        internal void DownloadPressed()
        {
            didPressDownload?.Invoke(_currentSong, _coverImage.sprite);
            DownloadInteractable = false;
        }
        [UIAction("uploaderPressed")]
        internal void UploaderPressed()
        {
            didPressUploader?.Invoke(_currentSong.Uploader);
        }

        [UIComponent("previewButton")]
        private Button _previewButton;

        [UIAction("previewPressed")]
        internal void PreviewPressed()
        {
            didPressPreview?.Invoke(_currentSong);
            //_previewButton = gameObject.GetComponentsInChildren<GameObject>().First(x => x.gameObject.transform.parent.name == "previewButton");
            //_previewButton.text = "Stop preview";
            _previewButton.GetComponentInChildren<Text>().text = "Stop preview";
        }

        internal void ClearData()
        {
            if (_detailViewSetup)
            {
                //Clear all the data
          //      _timeText.text = "--";
          //      _bpmText.text = "--";
                _npsText.text = "--";
                _notesText.text = "--";
                _obstaclesText.text = "--";
                _bombsText.text = "--";
                _songNameText.text = "--";
                _coverImage.sprite = Misc.Sprites.LoadSpriteFromTexture(Texture2D.blackTexture);
                _diffSegmentedControl.SetTexts(new string[] { });
                _characteristicSegmentedControl.SetData(new IconSegmentedControl.DataItem[] { });
                DownloadInteractable = false;
                UploaderInteractable = false;
                ShowAutoGeneratedText = false;
            }
        }

        internal async void Initialize(StrongBox<BeatSaverSharp.Beatmap> song, Sprite cover)
        {
            if (song.Value.Partial)
            {
                try
                {
                    await song.Value.Populate();
                }
                catch (BeatSaverSharp.Exceptions.InvalidPartialException ex)
                {
                    Plugin.log.Warn("Map not found on BeatSaver");
                    _songNameText.text = "Song Not Found";
                    return;
                }

            }

            _currentSong = song.Value;

            _songNameText.text = _currentSong.Metadata.SongName;
            if (cover != null)
                _coverImage.sprite = cover;
            UpdateDownloadButtonStatus();
            SetupCharacteristicDisplay();
            SelectedCharacteristic(_currentSong.Metadata.Characteristics[0]);
            UploaderInteractable = true;
            ShowAutoGeneratedText = _currentSong.Metadata.Automapper != null;
            setDescription?.Invoke(_currentSong.Description);
        }

        internal void UpdateDownloadButtonStatus()
        {
            DownloadInteractable = !Misc.SongDownloader.Instance.IsSongDownloaded(_currentSong.Hash);
        }

        protected override void DidDeactivate(bool removedFromHierarchy, bool screenSystemDisabling)
        {
            base.DidDeactivate(removedFromHierarchy, screenSystemDisabling);
        }

        internal void SetupDetailView()
        {
            _levelDetails = GameObject.Instantiate(PluginUI._levelDetailClone, gameObject.transform);
            _levelDetails.gameObject.SetActive(false);

            _characteristicSegmentedControllerClone = _levelDetails.GetComponentInChildren<BeatmapCharacteristicSegmentedControlController>();
            _characteristicSegmentedControl = CreateIconSegmentedControl(_characteristicSegmentedControllerClone.transform as RectTransform, new Vector2(0, 0), new Vector2(0, 0),
                delegate (int value) { SelectedCharacteristic(_currentSong.Metadata.Characteristics[value]); });

            _difficultiesSegmentedControllerClone = _levelDetails.GetComponentInChildren<BeatmapDifficultySegmentedControlController>();
            _diffSegmentedControl = CreateTextSegmentedControl(_difficultiesSegmentedControllerClone.transform as RectTransform, new Vector2(0, 0), new Vector2(0, 0),
                delegate (int value) { SelectedDifficulty(_currentDifficulties[value]); }, 3.5f, 1);

            _songNameText = _levelDetails.GetComponentsInChildren<CurvedTextMeshPro>().First(x => x.gameObject.name == "SongNameText");
            _songSubText = _levelDetails.GetComponentsInChildren<CurvedTextMeshPro>().First(x => x.gameObject.name == "AuthorNameText");
            _songSubText.overflowMode = TextOverflowModes.Overflow;
            _songSubText.enableWordWrapping = false;

            _coverImage = _levelDetails.transform.Find("LevelBarBig").Find("SongArtwork").GetComponent<ImageView>();

         //   _timeText = _levelDetails.GetComponentsInChildren<TextMeshProUGUI>().First(x => x.gameObject.transform.parent.name == "Time");
         //   _bpmText = _levelDetails.GetComponentsInChildren<TextMeshProUGUI>().First(x => x.gameObject.transform.parent.name == "BPM");
            
            _npsText = _levelDetails.GetComponentsInChildren<CurvedTextMeshPro>().First(x => x.gameObject.transform.parent.name == "NPS");
            _notesText = _levelDetails.GetComponentsInChildren<CurvedTextMeshPro>().First(x => x.gameObject.transform.parent.name == "NotesCount");
            _obstaclesText = _levelDetails.GetComponentsInChildren<CurvedTextMeshPro>().First(x => x.gameObject.transform.parent.name == "ObstaclesCount");
            _bombsText = _levelDetails.GetComponentsInChildren<CurvedTextMeshPro>().First(x => x.gameObject.transform.parent.name == "BombsCount");

           

            //     _timeText.text = "--";
            //      _bpmText.text = "--";
            _songSubText.text = "--";
            _npsText.text = "--";
            _notesText.text = "--";
            _obstaclesText.text = "--";
            _bombsText.text = "--";
            _songNameText.text = "--";
            _detailViewSetup = true;
            _levelDetails.gameObject.SetActive(true);
        }

        public void SelectedDifficulty(BeatSaverSharp.BeatmapCharacteristicDifficulty difficulty)
        {
            //       _timeText.text = $"{Math.Floor((double)difficulty.Length / 60):N0}:{Math.Floor((double)difficulty.Length % 60):00}";
            //       _bpmText.text = _currentSong.Metadata.BPM.ToString();
            _songSubText.text = $"{_currentSong.Metadata.BPM.ToString()} BPM   " + $"{Math.Floor((double)difficulty.Length / 60):N0}:{Math.Floor((double)difficulty.Length % 60):00}";
            _npsText.text = ((float)difficulty.Notes / (float)difficulty.Length).ToString("F2");
            _notesText.text = difficulty.Notes.ToString();
            _obstaclesText.text = difficulty.Obstacles.ToString();
            _bombsText.text = difficulty.Bombs.ToString();
        }

        public void SelectedCharacteristic(BeatSaverSharp.BeatmapCharacteristic characteristic)
        {
            _selectedCharacteristic = characteristic;
            if (_diffSegmentedControl != null)
                SetupDifficultyDisplay();
        }

        internal void SetupDifficultyDisplay()
        {
            var diffs = new List<BeatSaverSharp.BeatmapCharacteristicDifficulty>();
            List<string> diffNames = new List<string>(_selectedCharacteristic.Difficulties.Keys.Where(x => _selectedCharacteristic.Difficulties[x].HasValue)).OrderBy(x => DiffOrder(x)).ToList();
            foreach (var diff in diffNames)
            {
                if (_selectedCharacteristic.Difficulties[diff].HasValue)
                    diffs.Add(_selectedCharacteristic.Difficulties[diff].Value);
            }

            for (int i = 0; i < diffNames.Count; ++i)
            {
                diffNames[i] = ToDifficultyName(diffNames[i]);
            }
            _currentDifficulties = diffs.ToArray();

            _diffSegmentedControl.SetTexts(diffNames.ToArray());
            foreach (var text in _diffSegmentedControl.GetComponentsInChildren<TextMeshProUGUI>()) text.enableWordWrapping = false;

            if (diffs.Count > 0)
                _diffSegmentedControl.SelectCellWithNumber(0);
            if (_currentDifficulties != null)
                SelectedDifficulty(_currentDifficulties[0]);
        }

        private void SetupCharacteristicDisplay()
        {
            List<IconSegmentedControl.DataItem> characteristics = new List<IconSegmentedControl.DataItem>();
            foreach (var c in _currentSong.Metadata.Characteristics)
            {
                BeatmapCharacteristicSO characteristic = SongCore.Loader.beatmapCharacteristicCollection.GetBeatmapCharacteristicBySerializedName(c.Name);
                if (characteristic.characteristicNameLocalizationKey == "Missing Characteristic")
                {
                    characteristics.Add(new IconSegmentedControl.DataItem(characteristic.icon, $"Missing Characteristic: {c.Name}"));
                }
                else
                    characteristics.Add(new IconSegmentedControl.DataItem(characteristic.icon, Polyglot.Localization.Get(characteristic.descriptionLocalizationKey)));
            }

            _characteristicSegmentedControl.SetData(characteristics.ToArray());
        }

        internal static string ToDifficultyName(string name)
        {
            if (name == "easy")
                return "Easy";
            else if (name == "normal")
                return "Normal";
            else if (name == "hard")
                return "Hard";
            else if (name == "expert")
                return "Expert";
            else if (name == "expertPlus")
                return "Expert+";
            else
                return "--";
        }

        internal static int DiffOrder(string name)
        {
            switch (name)
            {
                case "easy":
                    return 0;

                case "normal":
                    return 1;

                case "hard":
                    return 2;

                case "expert":
                    return 3;

                case "expertPlus":
                    return 4;

                default:
                    return 5;
            }
        }

        public static TextSegmentedControl CreateTextSegmentedControl(RectTransform parent, Vector2 anchoredPosition, Vector2 sizeDelta, Action<int> onValueChanged = null, float fontSize = 4f, float padding = 8f)
        {
            var segmentedControl = new GameObject("CustomTextSegmentedControl", typeof(RectTransform)).AddComponent<TextSegmentedControl>();
            segmentedControl.gameObject.AddComponent<HorizontalLayoutGroup>();

            TextSegmentedControlCell[] _segments = Resources.FindObjectsOfTypeAll<TextSegmentedControlCell>();

            segmentedControl.SetPrivateField("_singleCellPrefab", _segments.First(x => x.name == "SingleHorizontalTextSegmentedControlCell"));
            segmentedControl.SetPrivateField("_firstCellPrefab", _segments.First(x => x.name == "LeftHorizontalTextSegmentedControlCell"));
            segmentedControl.SetPrivateField("_middleCellPrefab", _segments.Last(x => x.name == "MiddleHorizontalTextSegmentedControlCell"));
            segmentedControl.SetPrivateField("_lastCellPrefab", _segments.Last(x => x.name == "RightHorizontalTextSegmentedControlCell"));

            segmentedControl.SetPrivateField("_container", Resources.FindObjectsOfTypeAll<TextSegmentedControl>().Select(x => x.GetPrivateField<object>("_container")).First(x => x != null));

            segmentedControl.transform.SetParent(parent, false);
            (segmentedControl.transform as RectTransform).anchorMax = new Vector2(0.5f, 0.5f);
            (segmentedControl.transform as RectTransform).anchorMin = new Vector2(0.5f, 0.5f);
            (segmentedControl.transform as RectTransform).anchoredPosition = anchoredPosition;
            (segmentedControl.transform as RectTransform).sizeDelta = sizeDelta;

            segmentedControl.SetPrivateField("_fontSize", fontSize);
            segmentedControl.SetPrivateField("_padding", padding);
            if (onValueChanged != null)
                segmentedControl.didSelectCellEvent += (sender, index) => { onValueChanged(index); };

            return segmentedControl;
        }

        public static IconSegmentedControl CreateIconSegmentedControl(RectTransform parent, Vector2 anchoredPosition, Vector2 sizeDelta, Action<int> onValueChanged = null)
        {
            var segmentedControl = new GameObject("CustomIconSegmentedControl", typeof(RectTransform)).AddComponent<IconSegmentedControl>();
            segmentedControl.gameObject.AddComponent<HorizontalLayoutGroup>();

            IconSegmentedControlCell[] _segments = Resources.FindObjectsOfTypeAll<IconSegmentedControlCell>();

            segmentedControl.SetPrivateField("_singleCellPrefab", _segments.First(x => x.name == "SingleHorizontalIconSegmentedControlCell"));
            segmentedControl.SetPrivateField("_firstCellPrefab", _segments.First(x => x.name == "LeftHorizontalIconSegmentedControlCell"));
            segmentedControl.SetPrivateField("_middleCellPrefab", _segments.First(x => x.name == "MiddleHorizontalIconSegmentedControlCell"));
            segmentedControl.SetPrivateField("_lastCellPrefab", _segments.First(x => x.name == "RightHorizontalIconSegmentedControlCell"));

            segmentedControl.SetPrivateField("_container", Resources.FindObjectsOfTypeAll<IconSegmentedControl>().Select(x => x.GetPrivateField<object>("_container")).First(x => x != null));

            segmentedControl.transform.SetParent(parent, false);
            (segmentedControl.transform as RectTransform).anchorMax = new Vector2(0.5f, 0.5f);
            (segmentedControl.transform as RectTransform).anchorMin = new Vector2(0.5f, 0.5f);
            (segmentedControl.transform as RectTransform).anchoredPosition = anchoredPosition;
            (segmentedControl.transform as RectTransform).sizeDelta = sizeDelta;

            if (onValueChanged != null)
                segmentedControl.didSelectCellEvent += (sender, index) => { onValueChanged(index); };

            return segmentedControl;
        }
    }
}